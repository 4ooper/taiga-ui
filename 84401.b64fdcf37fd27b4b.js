(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[84401],{84401:e=>{e.exports="import {AsyncPipe, isPlatformServer} from '@angular/common';\nimport {Component, inject, PLATFORM_ID, signal} from '@angular/core';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {TUI_IS_E2E, TuiMapperPipe} from '@taiga-ui/cdk';\nimport {TuiButton} from '@taiga-ui/core';\nimport {TuiPager, TuiProgress} from '@taiga-ui/kit';\nimport {map, type Observable, of, takeWhile, tap, timer} from 'rxjs';\n\n@Component({\n    standalone: true,\n    exportAs: \"Example3\",\n    imports: [AsyncPipe, TuiButton, TuiMapperPipe, TuiPager, TuiProgress],\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    protected static = inject(TUI_IS_E2E) || isPlatformServer(inject(PLATFORM_ID));\n    protected count = 10;\n    protected activeIndex = signal(0);\n\n    protected readonly toProgress = (active: boolean): Observable<number> =>\n        active && !this.static\n            ? timer(0, 100).pipe(\n                  map((i) => i * 5 + 20),\n                  takeWhile((value) => value <= 100),\n                  tap({complete: () => this.next()}),\n              )\n            : of(100);\n\n    protected prev(): void {\n        this.activeIndex.update((index) => Math.max(index - 1, 0));\n    }\n\n    protected next(): void {\n        this.activeIndex.update((index) => Math.min(index + 1, this.count - 1));\n    }\n}\n"}}]);