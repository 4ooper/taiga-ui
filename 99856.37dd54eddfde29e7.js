(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[99856],{99856:n=>{n.exports="import {Component} from '@angular/core';\nimport {\n    type AbstractControl,\n    FormControl,\n    FormGroup,\n    FormsModule,\n    ReactiveFormsModule,\n    Validators,\n} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {TuiError, TuiTextfield} from '@taiga-ui/core';\nimport {TuiSwitch} from '@taiga-ui/kit';\nimport {TuiForm} from '@taiga-ui/layout';\n\nexport function passwordValidator(field: AbstractControl): Validators | null {\n    return field.value && /^[a-zA-Z]+$/.test(field.value)\n        ? null\n        : {other: 'Only latin letters are allowed'};\n}\n\nexport function superComputerValidator(field: AbstractControl): Validators | null {\n    return field.value === '42' ? null : {other: 'Wrong'};\n}\n\n@Component({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        TuiError,\n        TuiSwitch,\n        TuiForm,\n        TuiTextfield,\n    ],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    protected enabled = false;\n    protected readonly form = new FormGroup(\n        {\n            answer: new FormControl('', [Validators.required, superComputerValidator]),\n            password: new FormControl('', [Validators.required, passwordValidator]),\n        },\n        (control) => (control.invalid ? {other: 'Form is invalid'} : null),\n    );\n\n    constructor() {\n        this.form.controls.password.valueChanges?.subscribe(() => {\n            this.form.controls.password.markAsTouched();\n        });\n    }\n\n    protected get error(): string | null {\n        return this.enabled ? 'An error' : null;\n    }\n}\n"}}]);