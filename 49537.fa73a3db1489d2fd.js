(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[49537],{49537:n=>{n.exports="import {AsyncPipe, NgForOf, NgIf} from '@angular/common';\nimport {Component} from '@angular/core';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport type {\n    TuiComparator,\n    TuiSortChange,\n    TuiTablePaginationEvent,\n} from '@taiga-ui/addon-table';\nimport {\n    TuiReorder,\n    TuiSortDirection,\n    TuiTable,\n    TuiTablePagination,\n} from '@taiga-ui/addon-table';\nimport {\n    TUI_DEFAULT_MATCHER,\n    tuiControlValue,\n    TuiDay,\n    tuiDefaultSort,\n    tuiIsFalsy,\n    tuiIsPresent,\n    TuiLet,\n    tuiToInt,\n} from '@taiga-ui/cdk';\nimport {\n    TuiButton,\n    TuiDropdown,\n    TuiLabel,\n    TuiLoader,\n    TuiNumberFormat,\n    TuiTextfield,\n} from '@taiga-ui/core';\nimport {TuiCheckbox, TuiChevron, TuiInputNumber} from '@taiga-ui/kit';\nimport type {Observable} from 'rxjs';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    debounceTime,\n    filter,\n    map,\n    share,\n    startWith,\n    switchMap,\n    tap,\n    timer,\n} from 'rxjs';\n\ninterface User {\n    readonly dob: TuiDay;\n    readonly name: string;\n    readonly age: number;\n}\n\nconst TODAY = TuiDay.currentLocal();\n\nconst FIRST = [\n    'John',\n    'Jane',\n    'Jack',\n    'Jill',\n    'James',\n    'Joan',\n    'Jim',\n    'Julia',\n    'Joe',\n    'Julia',\n];\n\nconst LAST = [\n    'Smith',\n    'West',\n    'Brown',\n    'Jones',\n    'Davis',\n    'Miller',\n    'Johnson',\n    'Jackson',\n    'Williams',\n    'Wilson',\n];\n\nconst DATA: readonly User[] = Array.from({length: 300}, () => {\n    const dob = TODAY.append({day: -Math.floor(Math.random() * 4000) - 7500}),\n        age = getAge(dob),\n        name = `${LAST[Math.floor(Math.random() * 10)]}, ${FIRST[Math.floor(Math.random() * 10)]}`;\n\n    return {name, dob, age};\n});\n\nconst KEYS: Record<string, keyof User> = {\n    Name: 'name',\n    Age: 'age',\n    'Date of Birth': 'dob',\n};\n\nfunction sortBy(key: keyof User, direction: TuiSortDirection): TuiComparator<User> {\n    return (a, b) => direction * tuiDefaultSort(a[key], b[key]);\n}\n\nfunction getAge(dob: TuiDay): number {\n    const years = TODAY.year - dob.year;\n    const months = TODAY.month - dob.month;\n    const days = TODAY.day - dob.day;\n    const offset = tuiToInt(months > 0 || (!months && days > 9));\n\n    return years + offset;\n}\n\n@Component({\n    standalone: true,\n    exportAs: \"Example4\",\n    imports: [\n        AsyncPipe,\n        FormsModule,\n        NgForOf,\n        NgIf,\n        ReactiveFormsModule,\n        TuiButton,\n        TuiCheckbox,\n        TuiChevron,\n        TuiDropdown,\n        TuiInputNumber,\n        TuiLabel,\n        TuiLet,\n        TuiLoader,\n        TuiNumberFormat,\n        TuiReorder,\n        TuiTable,\n        TuiTablePagination,\n        TuiTextfield,\n    ],\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    private readonly size$ = new BehaviorSubject(10);\n    protected readonly page$ = new BehaviorSubject(0);\n\n    protected readonly direction$ = new BehaviorSubject<TuiSortDirection>(\n        TuiSortDirection.Desc,\n    );\n\n    protected readonly sortKey$ = new BehaviorSubject<keyof User>('name');\n\n    protected readonly minAge = new FormControl(21);\n    protected readonly minAge$ = tuiControlValue<number>(this.minAge).pipe(\n        debounceTime(1000),\n        tap(() => this.page$.next(0)),\n    );\n\n    protected readonly request$ = combineLatest([\n        this.sortKey$,\n        this.direction$,\n        this.page$,\n        this.size$,\n        this.minAge$,\n    ]).pipe(\n        // zero time debounce for a case when both key and direction change\n        debounceTime(0),\n        switchMap((query) => this.getData(...query).pipe(startWith(null))),\n        share(),\n    );\n\n    protected initial: readonly string[] = ['Name', 'Date of Birth', 'Age'];\n\n    protected enabled = this.initial;\n\n    protected columns = ['name', 'dob', 'age'];\n\n    protected dob = false;\n\n    protected search = '';\n\n    protected readonly loading$ = this.request$.pipe(map(tuiIsFalsy));\n\n    protected readonly total$ = this.request$.pipe(\n        filter(tuiIsPresent),\n        map(({length}) => length),\n        startWith(1),\n    );\n\n    protected readonly data$: Observable<readonly User[]> = this.request$.pipe(\n        filter(tuiIsPresent),\n        map((users) => users.filter(tuiIsPresent)),\n        startWith([]),\n    );\n\n    protected onEnabled(enabled: readonly string[]): void {\n        this.enabled = enabled;\n        this.columns = this.initial\n            .filter((column) => enabled.includes(column))\n            .map((column) => KEYS[column] ?? '');\n    }\n\n    protected onPagination({page, size}: TuiTablePaginationEvent): void {\n        this.page$.next(page);\n        this.size$.next(size);\n    }\n\n    protected isMatch(value: unknown): boolean {\n        return !!this.search && TUI_DEFAULT_MATCHER(value, this.search);\n    }\n\n    protected change({sortKey, sortDirection}: TuiSortChange<User>): void {\n        this.sortKey$.next(sortKey!);\n        this.direction$.next(sortDirection);\n    }\n\n    private getData(\n        key: keyof User,\n        direction: TuiSortDirection,\n        page: number,\n        size: number,\n        minAge: number,\n    ): Observable<ReadonlyArray<User | null>> {\n        console.info(`Sort by ${key} , direction : ${direction}`);\n\n        const start = page * size;\n        const end = start + size;\n        const result = [...DATA]\n            .sort(sortBy(key, direction))\n            .filter((user) => user.age >= minAge)\n            .map((user, index) => (index >= start && index < end ? user : null));\n\n        // Imitating server response\n        return timer(Math.random() * 1e3 + 1e3).pipe(map(() => result));\n    }\n}\n"}}]);