(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[10293],{10293:e=>{e.exports="import {AsyncPipe, NgForOf} from '@angular/common';\nimport type {QueryList} from '@angular/core';\nimport {Component, ElementRef, ViewChild, ViewChildren} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {assets} from '@demo/utils';\nimport type {TuiBooleanHandler, TuiMapper} from '@taiga-ui/cdk';\nimport {EMPTY_QUERY, TuiMapperPipe} from '@taiga-ui/cdk';\nimport {\n    TuiDataList,\n    TuiDriver,\n    TuiDropdown,\n    tuiGetWordRange,\n    TuiInitialsPipe,\n    TuiOptionNew,\n    TuiTextfield,\n} from '@taiga-ui/core';\nimport {TuiAvatar, TuiTextarea} from '@taiga-ui/kit';\nimport {TuiTextareaModule} from '@taiga-ui/legacy';\nimport type {Observable} from 'rxjs';\n\nexport interface User {\n    readonly avatar: string;\n    readonly login: string;\n    readonly name: string;\n}\n\n@Component({\n    standalone: true,\n    exportAs: \"Example2\",\n    imports: [\n        AsyncPipe,\n        FormsModule,\n        NgForOf,\n        TuiAvatar,\n        TuiDataList,\n        TuiDropdown,\n        TuiInitialsPipe,\n        TuiMapperPipe,\n        TuiTextarea,\n        TuiTextareaModule,\n        TuiTextfield,\n    ],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    @ViewChildren(TuiOptionNew, {read: ElementRef})\n    private readonly options: QueryList<ElementRef<HTMLElement>> = EMPTY_QUERY;\n\n    @ViewChild(TuiTextarea, {read: ElementRef})\n    private readonly textarea?: ElementRef<HTMLTextAreaElement>;\n\n    @ViewChild(TuiDriver)\n    protected readonly driver?: Observable<boolean>;\n\n    protected value = 'Type @ to see a dropdown';\n\n    protected readonly items = [\n        {\n            name: 'Alexander Inkin',\n            avatar: assets`/images/avatar.jpg`,\n            login: 'a.inkin',\n        },\n        {\n            name: 'Roman Sedov',\n            avatar: '',\n            login: 'r.sedov',\n        },\n    ];\n\n    protected get search(): string {\n        const el = this.textarea?.nativeElement;\n\n        return el?.value.slice(el.value.indexOf('@'), el.selectionStart) || '';\n    }\n\n    protected readonly filter: TuiMapper<[readonly User[], string], readonly User[]> = (\n        items,\n        search,\n    ) =>\n        items.filter(\n            ({name, login}) => login.startsWith(search) || name.startsWith(search),\n        );\n\n    protected predicate: TuiBooleanHandler<Range> = (range) =>\n        String(tuiGetWordRange(range)).startsWith('@');\n\n    protected onArrow(event: Event, which: 'first' | 'last'): void {\n        const item = this.options[which];\n\n        if (!item) {\n            return;\n        }\n\n        event.preventDefault();\n        item.nativeElement.focus();\n    }\n\n    protected onClick(login: string): void {\n        if (!this.textarea) {\n            return;\n        }\n\n        const search = this.search;\n        const value = this.value.replace(search, login);\n        const caret = value.indexOf(login) + login.length;\n\n        this.value = value;\n        this.textarea.nativeElement.focus();\n        this.textarea.nativeElement.value = value;\n        this.textarea.nativeElement.setSelectionRange(caret, caret);\n    }\n}\n"}}]);