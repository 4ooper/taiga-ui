(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[49780],{49780:e=>{e.exports="import {AsyncPipe} from '@angular/common';\nimport {Component, inject} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {TuiDataList} from '@taiga-ui/core';\nimport {TuiDataListWrapper} from '@taiga-ui/kit';\nimport {TuiInputTagModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';\nimport {delay, type Observable, of, startWith, Subject, switchMap} from 'rxjs';\n\n@Component({\n    standalone: true,\n    exportAs: \"Example2\",\n    imports: [\n        AsyncPipe,\n        FormsModule,\n        TuiDataList,\n        TuiDataListWrapper,\n        TuiInputTagModule,\n        TuiTextfieldControllerModule,\n    ],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    // Database mock data\n    private readonly items = inject<readonly string[]>('Pythons' as any);\n    private readonly search$ = new Subject<string>();\n\n    protected value = [];\n\n    protected readonly items$ = this.search$.pipe(\n        switchMap((search) =>\n            this.serverRequest(search).pipe(startWith<readonly string[] | null>(null)),\n        ),\n        startWith(this.items),\n    );\n\n    protected onSearchChange(search: string): void {\n        this.search$.next(search);\n    }\n\n    /**\n     * Server request emulation\n     */\n    private serverRequest(search: string): Observable<readonly string[]> {\n        const result = this.items.filter((item) =>\n            item.toLowerCase().includes(search.toLowerCase()),\n        );\n\n        return of(result).pipe(delay(Math.random() * 1000 + 500));\n    }\n}\n"}}]);