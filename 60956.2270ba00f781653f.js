(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[60956],{60956:n=>{n.exports="import {AsyncPipe} from '@angular/common';\nimport {Component} from '@angular/core';\nimport {FormsModule, type ValidatorFn} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {WaIntersectionObserver} from '@ng-web-apis/intersection-observer';\nimport {type TuiComparator, TuiTable} from '@taiga-ui/addon-table';\nimport {TuiDay, tuiDefaultSort, TuiValidator} from '@taiga-ui/cdk';\nimport {\n    TuiFormatNumberPipe,\n    TuiIcon,\n    TuiNumberFormat,\n    TuiScrollbar,\n    TuiTextfield,\n} from '@taiga-ui/core';\nimport {\n    TuiChevron,\n    TuiDataListWrapper,\n    TuiInputDate,\n    TuiInputNumber,\n    TuiSelect,\n    TuiTextarea,\n} from '@taiga-ui/kit';\n\ninterface Item {\n    readonly date: TuiDay;\n    readonly name: string;\n    readonly price: number;\n    readonly quantity: number;\n    readonly unit: string;\n}\n\n@Component({\n    imports: [\n        AsyncPipe,\n        FormsModule,\n        TuiChevron,\n        TuiDataListWrapper,\n        TuiFormatNumberPipe,\n        TuiIcon,\n        TuiInputDate,\n        TuiInputNumber,\n        TuiNumberFormat,\n        TuiScrollbar,\n        TuiSelect,\n        TuiTable,\n        TuiTextarea,\n        TuiTextfield,\n        TuiValidator,\n        WaIntersectionObserver,\n    ],\n    templateUrl: './index.html',\n    styleUrl: './index.less',\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    protected readonly options = {updateOn: 'blur'} as const;\n\n    protected readonly units = ['items', 'kg', 'm'];\n\n    protected pythons: readonly Item[] = [\n        {\n            name: 'Holy Grail',\n            price: 999999,\n            quantity: 1,\n            unit: this.units[0] ?? '',\n            date: TuiDay.currentLocal(),\n        },\n        {\n            name: 'Foot',\n            price: 29.95,\n            quantity: 5,\n            unit: this.units[2] ?? '',\n            date: TuiDay.currentLocal().append({day: -42}),\n        },\n        {\n            name: 'Shed',\n            price: 499,\n            quantity: 2,\n            unit: this.units[0] ?? '',\n            date: TuiDay.currentLocal().append({day: -237}),\n        },\n    ];\n\n    protected starwars: readonly Item[] = [\n        {\n            name: 'Lightsaber',\n            price: 4999,\n            quantity: 3,\n            unit: this.units[0] ?? '',\n            date: TuiDay.currentLocal(),\n        },\n        {\n            name: 'Spaceship',\n            price: 19999,\n            quantity: 1,\n            unit: this.units[0] ?? '',\n            date: TuiDay.currentLocal().append({day: -237}),\n        },\n        {\n            name: 'Stormtrooper helmet',\n            price: 14.95,\n            quantity: 5,\n            unit: this.units[0] ?? '',\n            date: TuiDay.currentLocal().append({day: -42}),\n        },\n    ];\n\n    protected readonly columns = [\n        'name',\n        'price',\n        'quantity',\n        'unit',\n        'date',\n        'total',\n    ] as const;\n\n    protected readonly minPrice: ValidatorFn = ({value}) =>\n        value > 400 ? null : {minPrice: 'Price must be above $400'};\n\n    protected readonly totalSorter: TuiComparator<Item> = (a, b) =>\n        tuiDefaultSort(a.price * a.quantity, b.price * b.quantity);\n\n    protected trackByIndex(index: number): number {\n        return index;\n    }\n\n    protected getTotal({price, quantity}: Item): number {\n        return price * quantity;\n    }\n\n    protected onValueChange<K extends keyof Item>(\n        value: Item[K],\n        key: K,\n        current: Item,\n        data: readonly Item[],\n    ): void {\n        const updated = {...current, [key]: value};\n\n        this.pythons =\n            data === this.pythons\n                ? this.pythons.map((item) => (item === current ? updated : item))\n                : this.pythons;\n\n        this.starwars =\n            data === this.starwars\n                ? this.starwars.map((item) => (item === current ? updated : item))\n                : this.starwars;\n    }\n}\n"}}]);