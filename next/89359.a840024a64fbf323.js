(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[89359],{89359:e=>{e.exports="import {ChangeDetectorRef, Component, inject, signal} from '@angular/core';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {EMPTY_ARRAY, type TuiHandler} from '@taiga-ui/cdk';\nimport {TuiTiles, TuiTree} from '@taiga-ui/kit';\n\ninterface TreeNode {\n    children?: readonly TreeNode[];\n    text: string;\n}\n\n@Component({\n    imports: [TuiTiles, TuiTree],\n    templateUrl: './index.html',\n    styleUrl: './index.less',\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    protected drag = signal<TreeNode | null>(null);\n\n    protected readonly cd = inject(ChangeDetectorRef);\n\n    protected readonly data: TreeNode = {\n        text: 'Topmost',\n        children: [\n            {\n                text: 'Top level 1',\n                children: [\n                    {\n                        text: 'Another item',\n                        children: [\n                            {text: 'Next level 1'},\n                            {text: 'Next level 2'},\n                            {text: 'Next level 3'},\n                        ],\n                    },\n                ],\n            },\n            {text: 'Top level 2'},\n            {\n                text: 'Top level 3',\n                children: [{text: 'Test 1'}, {text: 'Test 2'}],\n            },\n        ],\n    };\n\n    protected readonly handler: TuiHandler<TreeNode, readonly TreeNode[]> = (item) =>\n        item.children || EMPTY_ARRAY;\n\n    protected onDrag(drag: TreeNode): void {\n        this.drag.set(drag);\n    }\n\n    protected onDrop(target: TreeNode, position = 0): void {\n        const drag = this.drag();\n\n        if (!drag) {\n            return;\n        }\n\n        const dragParent = findParent(drag, this.data);\n        const targetParent = findParent(target, this.data);\n\n        if (dragParent) {\n            dragParent.children = dragParent?.children?.filter((item) => item !== drag);\n        }\n\n        const index = (targetParent?.children?.indexOf(target) ?? 0) + position;\n\n        if (targetParent?.children) {\n            targetParent.children = [\n                ...targetParent.children.slice(0, index),\n                drag,\n                ...targetParent.children.slice(index),\n            ];\n        }\n\n        this.drag.set(null);\n    }\n}\n\nfunction findParent(item: TreeNode, node: TreeNode): TreeNode | null {\n    if (!node.children) {\n        return null;\n    }\n\n    if (node.children.includes(item)) {\n        return node;\n    }\n\n    for (const iterateItem of node.children) {\n        const parent = findParent(item, iterateItem);\n\n        if (parent) {\n            return parent;\n        }\n    }\n\n    return null;\n}\n"}}]);