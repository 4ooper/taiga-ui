(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[43503],{43503:n=>{n.exports="import {KeyValuePipe} from '@angular/common';\nimport {Component} from '@angular/core';\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {TuiAutoFocus, tuiMarkControlAsTouchedAndValidate} from '@taiga-ui/cdk';\nimport {TuiAppearance, TuiButton, TuiTextfield, TuiTitle} from '@taiga-ui/core';\nimport {TuiSlides, TuiStepper} from '@taiga-ui/kit';\nimport {TuiCard, TuiForm, TuiHeader} from '@taiga-ui/layout';\n\n@Component({\n    imports: [\n        KeyValuePipe,\n        ReactiveFormsModule,\n        TuiAppearance,\n        TuiAutoFocus,\n        TuiButton,\n        TuiCard,\n        TuiForm,\n        TuiHeader,\n        TuiSlides,\n        TuiStepper,\n        TuiTextfield,\n        TuiTitle,\n    ],\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    protected index = 0;\n    protected direction = 0;\n\n    protected readonly forms = [\n        new FormGroup({\n            Name: new FormControl('', Validators.required),\n            Surname: new FormControl('', Validators.required),\n        }),\n        new FormGroup({\n            Country: new FormControl('', Validators.required),\n            City: new FormControl('', Validators.required),\n            Address: new FormControl('', Validators.required),\n        }),\n        new FormGroup({\n            Card: new FormControl('', Validators.required),\n            Value: new FormControl('', Validators.required),\n        }),\n    ];\n\n    protected onStep(step: number): void {\n        this.direction = step - this.index;\n        this.index = step;\n    }\n\n    protected onSubmit(): void {\n        tuiMarkControlAsTouchedAndValidate(this.forms[this.index]!);\n\n        if (this.forms[this.index]?.invalid) {\n            return;\n        }\n\n        this.direction = 1;\n        this.index = Math.min(this.index + 1, this.forms.length - 1);\n    }\n}\n"}}]);