(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[63124],{63124:n=>{n.exports="import {AsyncPipe} from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    DestroyRef,\n    inject,\n    type OnInit,\n    ViewChild,\n} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {\n    type TuiCard,\n    tuiCardNumberValidator,\n    tuiDefaultCardValidator,\n    TuiInputCardGroup,\n} from '@taiga-ui/addon-commerce';\nimport {TUI_IS_IOS, TuiAutoFocus, TuiLet, type TuiValuesOf} from '@taiga-ui/cdk';\nimport {\n    TuiButton,\n    TuiFormatNumberPipe,\n    TuiIconPipe,\n    TuiLink,\n    TuiLoader,\n    TuiTextfield,\n} from '@taiga-ui/core';\nimport {TuiButtonLoading, TuiCheckbox} from '@taiga-ui/kit';\nimport {type TuiDialogContext} from '@taiga-ui/legacy';\nimport {injectContext} from '@taiga-ui/polymorpheus';\nimport {BehaviorSubject, map, switchMap} from 'rxjs';\n\nimport {\n    type AccountCard,\n    type DataForPayCardModal,\n    type FetchedCards,\n    PaymentMode,\n} from '../helpers/models';\nimport {PayService} from '../helpers/pay.service';\nimport {inputCardGroupedCVCValidator} from '../helpers/validator';\n\n@Component({\n    selector: 'pay-modal',\n    imports: [\n        AsyncPipe,\n        ReactiveFormsModule,\n        TuiAutoFocus,\n        TuiButton,\n        TuiButtonLoading,\n        TuiCheckbox,\n        TuiFormatNumberPipe,\n        TuiIconPipe,\n        TuiInputCardGroup,\n        TuiLet,\n        TuiLink,\n        TuiLoader,\n        TuiTextfield,\n    ],\n    templateUrl: './pay-modal.component.html',\n    styleUrl: './pay-modal.component.less',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PayModal implements OnInit {\n    @ViewChild('cardGroupedInput')\n    private readonly cardGroupedInput?: TuiInputCardGroup;\n\n    private readonly payService = inject(PayService);\n    private readonly destroyRef = inject(DestroyRef);\n\n    protected readonly form = new FormGroup({\n        card: new FormControl<TuiCard | null>(null, [\n            Validators.required,\n            inputCardGroupedCVCValidator(),\n        ]),\n        saveCard: new FormControl(true),\n    });\n\n    protected readonly iOS = inject(TUI_IS_IOS);\n\n    protected cards: AccountCard[] = [];\n    protected paymentMode: TuiValuesOf<typeof PaymentMode> = PaymentMode.ByNewCard;\n    protected loading$ = new BehaviorSubject(false);\n    protected payProcessing$ = new BehaviorSubject(false);\n    protected readonly paymentModeTypes = PaymentMode;\n\n    public readonly context =\n        injectContext<TuiDialogContext<void, DataForPayCardModal>>();\n\n    public readonly amount = this.context.data.amount;\n\n    public ngOnInit(): void {\n        this.fetchCardsAndSetPrimaryCard();\n    }\n\n    protected payBySelectedCard(card: AccountCard): void {\n        this.form.patchValue({\n            card: {card: this.maskedNumber(card), expire: '**/**', cvc: ''},\n        });\n\n        this.form.controls.card.removeValidators(tuiCardNumberValidator);\n        this.paymentMode = PaymentMode.BySavedCard;\n        this.cardGroupedInput?.focusCVC();\n    }\n\n    protected payByNewCard(): void {\n        this.form.patchValue({card: null});\n        this.form.controls.card.addValidators(tuiCardNumberValidator);\n        this.paymentMode = PaymentMode.ByNewCard;\n        this.cardGroupedInput?.focusCard();\n    }\n\n    protected pay(): void {\n        if (!this.form.controls.card.valid) {\n            return;\n        }\n\n        this.payProcessing$.next(true);\n        this.payService\n            .pay()\n            .pipe(takeUntilDestroyed(this.destroyRef))\n            .subscribe({\n                next: () => {\n                    this.payProcessing$.next(false);\n                    this.context.$implicit.complete();\n                },\n                error: () => {\n                    this.payProcessing$.next(false);\n                },\n            });\n    }\n\n    protected cardValidator(card: string): boolean {\n        return tuiDefaultCardValidator(card) && card.length === 16;\n    }\n\n    private maskedNumber(savedCard: AccountCard): string {\n        return `${(savedCard.firstSix satisfies string).slice(0, -2)}***${savedCard.lastFour}`;\n    }\n\n    private fetchCardsAndSetPrimaryCard(): void {\n        this.loading$.next(true);\n        this.payService\n            .preparePayment(this.context.data.amount)\n            .pipe(\n                switchMap((amount) =>\n                    this.payService\n                        .getPrimaryCard()\n                        .pipe(map((data) => [amount, data] as [number, FetchedCards])),\n                ),\n                takeUntilDestroyed(this.destroyRef),\n            )\n            .subscribe({\n                next: ([, data]: [number, FetchedCards]) => {\n                    this.cards = data.cards;\n\n                    if (data.primary) {\n                        this.payBySelectedCard(data.primary);\n                    } else {\n                        this.payByNewCard();\n                    }\n                },\n                complete: () => this.loading$.next(false),\n            });\n    }\n}\n"}}]);