(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[20772],{20772:n=>{n.exports="import {Component, computed, signal} from '@angular/core';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {type TuiSortChange, TuiTable} from '@taiga-ui/addon-table';\n\ninterface Data {\n    id: number;\n    name: string;\n    color: string;\n}\n\n@Component({\n    standalone: true,\n    exportAs: \"Example10\",\n    imports: [TuiTable],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    protected readonly initial = [\n        {\n            name: 'Apple',\n            id: 1,\n            color: 'red',\n        },\n        {\n            name: 'Banana',\n            id: 2,\n            color: 'yellow',\n        },\n        {\n            name: 'Kiwi',\n            id: 3,\n            color: 'green',\n        },\n        {\n            name: 'Orange',\n            id: 4,\n            color: 'orange',\n        },\n        {\n            name: 'Grapes',\n            id: 5,\n            color: 'purple',\n        },\n        {\n            name: 'Strawberry',\n            id: 6,\n            color: 'red',\n        },\n        {\n            name: 'Blueberry',\n            id: 7,\n            color: 'blue',\n        },\n        {\n            name: 'Pineapple',\n            id: 8,\n            color: 'yellow',\n        },\n        {\n            name: 'Mango',\n            id: 9,\n            color: 'orange',\n        },\n        {\n            name: 'Watermelon',\n            id: 10,\n            color: 'green',\n        },\n        {\n            name: 'Peach',\n            id: 11,\n            color: 'orange',\n        },\n        {\n            name: 'Pear',\n            id: 12,\n            color: 'green',\n        },\n        {\n            name: 'Cherry',\n            id: 13,\n            color: 'red',\n        },\n        {\n            name: 'Lemon',\n            id: 14,\n            color: 'yellow',\n        },\n        {\n            name: 'Lime',\n            id: 15,\n            color: 'green',\n        },\n        {\n            name: 'Pomegranate',\n            id: 16,\n            color: 'red',\n        },\n        {\n            name: 'Raspberry',\n            id: 17,\n            color: 'red',\n        },\n        {\n            name: 'Blackberry',\n            id: 18,\n            color: 'purple',\n        },\n        {\n            name: 'Cantaloupe',\n            id: 19,\n            color: 'orange',\n        },\n        {\n            name: 'Plum',\n            id: 20,\n            color: 'purple',\n        },\n    ] as const;\n\n    protected readonly columns = Object.keys(this.initial[0]);\n    protected readonly direction = signal<-1 | 1>(-1);\n    protected readonly sortBy = signal<keyof Data | null>('color');\n    protected readonly data = computed<readonly Data[]>(() => {\n        const direction = this.direction();\n        const key = this.sortBy();\n\n        return key\n            ? [...this.initial].sort((a, b) => {\n                  const valA = a[key];\n                  const valB = b[key];\n\n                  if (typeof valA === 'string' && typeof valB === 'string') {\n                      return valA.localeCompare(valB) * direction;\n                  }\n\n                  if (typeof valA === 'number' && typeof valB === 'number') {\n                      return (valA - valB) * direction;\n                  }\n\n                  return 0;\n              })\n            : this.initial;\n    });\n\n    protected sortChange({sortKey, sortDirection}: TuiSortChange<Data>): void {\n        this.sortBy.set(sortKey);\n        this.direction.set(sortDirection);\n    }\n}\n"}}]);