(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[34486],{34486:n=>{n.exports="import {AsyncPipe, NgForOf, NgIf} from '@angular/common';\nimport {Component} from '@angular/core';\nimport {\n    type AbstractControl,\n    FormControl,\n    ReactiveFormsModule,\n    type ValidatorFn,\n} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {\n    EMPTY_ARRAY,\n    TUI_DEFAULT_MATCHER,\n    type TuiBooleanHandler,\n    tuiPure,\n    TuiValidationError,\n} from '@taiga-ui/cdk';\nimport {TuiDataList, TuiError} from '@taiga-ui/core';\nimport {TuiFieldErrorPipe} from '@taiga-ui/kit';\nimport {TuiInputTagModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';\n\nfunction createControlValidator(handler: TuiBooleanHandler<string>): ValidatorFn {\n    return ({value}: AbstractControl) => {\n        const invalidTags = value ? value.filter(handler) : EMPTY_ARRAY;\n\n        return invalidTags.length > 0\n            ? {\n                  tags: new TuiValidationError('Some tags are invalid'),\n              }\n            : null;\n    };\n}\n\nconst ITEMS = ['The Midnight', 'FM-84', 'Timecop1983', 'GUNSHIP'];\n\nfunction tagValidator(tag: string): boolean {\n    return !/\\d/.test(tag);\n}\n\n@Component({\n    imports: [\n        AsyncPipe,\n        NgForOf,\n        NgIf,\n        ReactiveFormsModule,\n        TuiDataList,\n        TuiError,\n        TuiFieldErrorPipe,\n        TuiInputTagModule,\n        TuiTextfieldControllerModule,\n    ],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    protected search = '';\n\n    protected readonly tagValidator = tagValidator;\n\n    protected readonly control = new FormControl<string[]>(\n        [],\n        createControlValidator(tagValidator),\n    );\n\n    protected get filtered(): readonly string[] {\n        return this.filterBy(this.search, this.control.value ?? []);\n    }\n\n    @tuiPure\n    private filterBy(search: string, value: readonly string[]): readonly string[] {\n        return ITEMS.filter(\n            (item) => TUI_DEFAULT_MATCHER(item, search) && !value.includes(item),\n        );\n    }\n}\n"}}]);