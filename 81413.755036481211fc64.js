(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[81413],{81413:e=>{e.exports="import {AsyncPipe} from '@angular/common';\nimport {Component} from '@angular/core';\nimport {\n    type AbstractControl,\n    FormControl,\n    ReactiveFormsModule,\n    type ValidatorFn,\n} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {TuiValidationError} from '@taiga-ui/cdk';\nimport {TuiError} from '@taiga-ui/core';\nimport {TuiFieldErrorPipe, TuiFiles, tuiFilesAccepted} from '@taiga-ui/kit';\nimport {map} from 'rxjs';\n\n@Component({\n    imports: [AsyncPipe, ReactiveFormsModule, TuiError, TuiFieldErrorPipe, TuiFiles],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport default class Example {\n    protected readonly control = new FormControl<File[]>([], [maxFilesLength(5)]);\n    protected readonly accepted$ = this.control.valueChanges.pipe(\n        map(() => tuiFilesAccepted(this.control)),\n    );\n\n    protected rejected: readonly File[] = [];\n\n    protected onReject(files: readonly File[]): void {\n        this.rejected = Array.from(new Set(this.rejected.concat(files)));\n    }\n\n    protected onRemove(file: File): void {\n        this.rejected = this.rejected.filter((rejected) => rejected !== file);\n        this.control.setValue(\n            this.control.value?.filter((current) => current !== file) ?? [],\n        );\n    }\n}\n\nexport function maxFilesLength(maxLength: number): ValidatorFn {\n    return ({value}: AbstractControl) =>\n        value.length > maxLength\n            ? {\n                  maxLength: new TuiValidationError(\n                      'Error: maximum limit - 5 files for upload',\n                  ),\n              }\n            : null;\n}\n"}}]);